{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","logo.svg","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","console","log","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAGaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,YAChF,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,YCDbC,G,MAAW,SAAAR,GAEpB,OADAS,QAAQC,IAAIV,GACJ,qBAAKC,UAAU,YAAf,SAEAD,EAAMW,SAASC,KAAI,SAAAT,GAAO,OAC1B,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCRlBS,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBACAd,UAAU,SACVe,KAAK,SACLF,YAAeA,EACfG,SAAWF,MC4CAG,GCpDA,I,wDDSb,aAAe,IAAD,8BACZ,gBAqBFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SApBpC,EAAKC,MAAQ,CAEXb,SAAU,GACVU,YAAa,IANL,E,qDAcd,WAAqB,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAU,CAAET,SAAUkB,S,oBAU5C,WAEE,IAAMlB,EAAWmB,KAAKN,MAAMb,SACtBU,EAAcS,KAAKN,MAAMH,YACzBU,EAAmBpB,EAASqB,QAAO,SAAA7B,GAAO,OAAIA,EAAQG,KAAK2B,cAAcC,SAASb,EAAYY,kBAEpG,OACE,sBAAKhC,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWa,YAAY,kBAAkBC,aAAgBe,KAAKf,eAC9D,cAAC,EAAD,CAAUJ,SAAYoB,W,GAtCZI,cEIHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d7b486b8.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.style.css';\r\n\r\nexport const Card = (props) => (\r\n    <div className='card-container'>\r\n        <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"monster\" />\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n)\r\n    \r\n","import React from 'react';\r\nimport { Card } from '../card/card.component';\r\nimport './card-list.style.css';\r\n\r\n// This is a functional component. \r\n// Assign a function to const CardList\r\nexport const CardList = props => {\r\n    console.log(props);\r\n    return  <div className=\"card-list\">\r\n        {         \r\n            props.monsters.map(monster => (\r\n            <Card key={monster.id} monster={monster} />\r\n            ))}\r\n        </div>;\r\n     \r\n}","import React from 'react';\r\nimport './search-box.style.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    <input \r\n    className='search' \r\n    type='search' \r\n    placeholder= { placeholder } \r\n    onChange={ handleChange }/>\r\n)","import { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport logo from './logo.svg';\nimport './App.css';\n\n// Instead of function App(), use class. By using class component, you can access 'state'.\n// This Component has method called setState(). You can use it on the 'button' element.\nclass App extends Component {\n  constructor() {\n    super() \n    // Get the data from API\n      this.state = {\n        // Make an array of objects: monsters\n        monsters: [],\n        searchField: ''\n      };\n\n      // Set handleChange function this\n      //this.handleChange = this.handleChange.bind(this);\n  }\n\n  // Use lift cycle method to get backend data\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json()) // Convert the returned response to JSON format\n    .then(users => this.setState( { monsters: users })) // Use setState() method to change the empty monsters array to users array retrieve from the backend data\n  }\n\n  // Extract the handleChange method. \n  // Use Arrow Function to avoid setting 'this' in the contractor for custom functions.\n  handleChange = e => {\n    this.setState({ searchField: e.target.value})\n  }\n\n  // Use the render() method to return HTML markup\n  render() {\n    // const { monsters, searchField } = this.state;\n    const monsters = this.state.monsters;\n    const searchField = this.state.searchField;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox placeholder='search monsters' handleChange= { this.handleChange } />\n        <CardList monsters= { filteredMonsters }></CardList>      \n      </div>\n    )\n  }\n}\n\nexport default App;\n\n\n/*\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n         Hello my name is Emily.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n*/","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}